{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction TelaPerguntasComponent_div_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.question == null ? null : ctx_r1.question.conteudo);\n  }\n}\nfunction TelaPerguntasComponent_div_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r3.question == null ? null : ctx_r3.question.conteudo, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction TelaPerguntasComponent_div_0_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\")(1, \"input\", 7);\n    i0.ɵɵlistener(\"change\", function TelaPerguntasComponent_div_0_li_5_Template_input_change_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const alternativa_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.selectAnswer(alternativa_r5.id));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const alternativa_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", alternativa_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", alternativa_r5.resposta, \" \");\n  }\n}\nfunction TelaPerguntasComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, TelaPerguntasComponent_div_0_ng_container_1_Template, 3, 1, \"ng-container\", 2);\n    i0.ɵɵtemplate(2, TelaPerguntasComponent_div_0_ng_template_2_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(4, \"ul\");\n    i0.ɵɵtemplate(5, TelaPerguntasComponent_div_0_li_5_Template, 3, 2, \"li\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function TelaPerguntasComponent_div_0_Template_button_click_6_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.nextQuestion());\n    });\n    i0.ɵɵtext(7, \"Pr\\u00F3xima Pergunta\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const _r2 = i0.ɵɵreference(3);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.question.tipo === \"texto\")(\"ngIfElse\", _r2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.question == null ? null : ctx_r0.question.alternativas);\n  }\n}\nexport class TelaPerguntasComponent {\n  constructor(http) {\n    this.http = http;\n    this.perguntas = [];\n    this.questionIndex = 0;\n  }\n  ngOnInit() {\n    this.loadQuestions();\n  }\n  loadQuestions() {\n    this.http.get('src/assets/perguntas.json').subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex];\n      this.selectedAnswer = undefined;\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n  selectAnswer(alternativaId) {\n    this.selectedAnswer = alternativaId;\n  }\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n  static #_ = this.ɵfac = function TelaPerguntasComponent_Factory(t) {\n    return new (t || TelaPerguntasComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TelaPerguntasComponent,\n    selectors: [[\"app-tela-perguntas\"]],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"question-container\", 4, \"ngIf\"], [1, \"question-container\"], [4, \"ngIf\", \"ngIfElse\"], [\"imagemEnunciado\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [\"alt\", \"Imagem do enunciado\", 3, \"src\"], [\"type\", \"radio\", \"name\", \"alternativa\", 3, \"value\", \"change\"]],\n    template: function TelaPerguntasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TelaPerguntasComponent_div_0_Template, 8, 3, \"div\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.question);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementContainerStart","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelementContainerEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r1","question","conteudo","ɵɵelement","ɵɵproperty","ctx_r3","ɵɵsanitizeUrl","ɵɵlistener","TelaPerguntasComponent_div_0_li_5_Template_input_change_1_listener","restoredCtx","ɵɵrestoreView","_r7","alternativa_r5","$implicit","ctx_r6","ɵɵnextContext","ɵɵresetView","selectAnswer","id","ɵɵtextInterpolate1","resposta","ɵɵtemplate","TelaPerguntasComponent_div_0_ng_container_1_Template","TelaPerguntasComponent_div_0_ng_template_2_Template","ɵɵtemplateRefExtractor","TelaPerguntasComponent_div_0_li_5_Template","TelaPerguntasComponent_div_0_Template_button_click_6_listener","_r9","ctx_r8","nextQuestion","ctx_r0","tipo","_r2","alternativas","TelaPerguntasComponent","constructor","http","perguntas","questionIndex","ngOnInit","loadQuestions","get","subscribe","data","loadQuestion","length","selectedAnswer","undefined","alternativaId","console","log","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","TelaPerguntasComponent_Template","rf","ctx","TelaPerguntasComponent_div_0_Template"],"sources":["C:\\Users\\pedro\\TelaPerguntas\\src\\app\\tela-perguntas\\tela-perguntas.component.ts","C:\\Users\\pedro\\TelaPerguntas\\src\\app\\tela-perguntas\\tela-perguntas.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Pergunta {\n  id: number;\n  tipo: 'texto' | 'imagem';\n  conteudo: string;\n  alternativas: Alternativa[];\n}\n\ninterface Alternativa {\n  id: number;\n  resposta: string;\n  tipo: 'texto' | 'imagem';\n}\n\n@Component({\n  selector: 'app-tela-perguntas',\n  templateUrl: './tela-perguntas.component.html',\n  styleUrls: ['./tela-perguntas.component.css']\n})\nexport class TelaPerguntasComponent implements OnInit {\n  perguntas: Pergunta[] = [];\n  question: Pergunta | undefined;\n  questionIndex: number = 0;\n  selectedAnswer: number | undefined;\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n  loadQuestions() {\n    this.http.get<Pergunta[]>('src/assets/perguntas.json').subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex]; \n      this.selectedAnswer = undefined;\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n\n  selectAnswer(alternativaId: number) {\n    this.selectedAnswer = alternativaId;\n  }\n\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n}\n","<div class=\"question-container\" *ngIf=\"question\">\n    <ng-container *ngIf=\"question.tipo === 'texto'; else imagemEnunciado\">\n      <h2>{{ question?.conteudo }}</h2>\n    </ng-container>\n    <ng-template #imagemEnunciado>\n      <img [src]=\"question?.conteudo\" alt=\"Imagem do enunciado\">\n    </ng-template>\n    \n    <ul>\n      <li *ngFor=\"let alternativa of question?.alternativas\">\n        <input type=\"radio\" name=\"alternativa\" [value]=\"alternativa.id\" (change)=\"selectAnswer(alternativa.id)\">\n        {{ alternativa.resposta }}\n      </li>\n    </ul>\n    <button (click)=\"nextQuestion()\">Próxima Pergunta</button>\n  </div>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}