{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TelaPerguntasComponent = class TelaPerguntasComponent {\n  constructor(perguntasService) {\n    this.perguntasService = perguntasService;\n    this.perguntas = [];\n    this.questionIndex = 0;\n    this.pontuacao = 0;\n  }\n  ngOnInit() {\n    this.loadQuestions();\n  }\n  loadQuestions() {\n    this.perguntasService.getPerguntas().subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex];\n      this.selectedAnswer = undefined;\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n  selectAnswer(alternativaId) {\n    const alternativaSelecionada = this.question?.alternativas.find(a => a.id === alternativaId);\n    if (alternativaSelecionada?.correta) {\n      this.pontuacao++; // Incrementa a pontuação se a resposta estiver correta\n    }\n\n    this.selectedAnswer = alternativaId;\n  }\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        console.log(\"Pontuação final:\", this.pontuacao);\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n};\n\nTelaPerguntasComponent = __decorate([Component({\n  selector: 'app-tela-perguntas',\n  templateUrl: './tela-perguntas.component.html',\n  styleUrls: ['./tela-perguntas.component.css']\n})], TelaPerguntasComponent);","map":{"version":3,"names":["Component","TelaPerguntasComponent","constructor","perguntasService","perguntas","questionIndex","pontuacao","ngOnInit","loadQuestions","getPerguntas","subscribe","data","loadQuestion","length","question","selectedAnswer","undefined","selectAnswer","alternativaId","alternativaSelecionada","alternativas","find","a","id","correta","nextQuestion","console","log","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\pedro\\TelaPerguntas\\src\\app\\tela-perguntas\\tela-perguntas.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { PerguntasService } from './perguntas.service';\n\n@Component({\n  selector: 'app-tela-perguntas',\n  templateUrl: './tela-perguntas.component.html',\n  styleUrls: ['./tela-perguntas.component.css']\n})\nexport class TelaPerguntasComponent implements OnInit {\n  perguntas: Pergunta[] = [];\n  question: Pergunta | undefined;\n  questionIndex: number = 0;\n  selectedAnswer: number | undefined;\n  pontuacao: number = 0;\n\n  constructor(private perguntasService: PerguntasService) { }\n\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n  loadQuestions() {\n    this.perguntasService.getPerguntas().subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex]; \n      this.selectedAnswer = undefined;\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n\n  selectAnswer(alternativaId: number) {\n    const alternativaSelecionada = this.question?.alternativas.find(a => a.id === alternativaId);\n    if (alternativaSelecionada?.correta) {\n      this.pontuacao++; // Incrementa a pontuação se a resposta estiver correta\n    }\n    this.selectedAnswer = alternativaId;\n  }\n\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        console.log(\"Pontuação final:\", this.pontuacao);\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAOjCC,YAAoBC,gBAAkC;IAAlC,KAAAA,gBAAgB,GAAhBA,gBAAgB;IANpC,KAAAC,SAAS,GAAe,EAAE;IAE1B,KAAAC,aAAa,GAAW,CAAC;IAEzB,KAAAC,SAAS,GAAW,CAAC;EAEqC;EAE1DC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAA,aAAaA,CAAA;IACX,IAAI,CAACL,gBAAgB,CAACM,YAAY,EAAE,CAACC,SAAS,CAACC,IAAI,IAAG;MACpD,IAAI,CAACP,SAAS,GAAGO,IAAI;MACrB,IAAI,CAACC,YAAY,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAA,YAAYA,CAAA;IACV,IAAI,IAAI,CAACR,SAAS,CAACS,MAAM,GAAG,CAAC,IAAI,IAAI,CAACR,aAAa,GAAG,IAAI,CAACD,SAAS,CAACS,MAAM,EAAE;MAC3E,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACV,SAAS,CAAC,IAAI,CAACC,aAAa,CAAC;MAClD,IAAI,CAACU,cAAc,GAAGC,SAAS;KAChC,MAAM;MACL;MACA,IAAI,CAACX,aAAa,GAAG,CAAC;;EAE1B;EAEAY,YAAYA,CAACC,aAAqB;IAChC,MAAMC,sBAAsB,GAAG,IAAI,CAACL,QAAQ,EAAEM,YAAY,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,aAAa,CAAC;IAC5F,IAAIC,sBAAsB,EAAEK,OAAO,EAAE;MACnC,IAAI,CAAClB,SAAS,EAAE,CAAC,CAAC;;;IAEpB,IAAI,CAACS,cAAc,GAAGG,aAAa;EACrC;EAEAO,YAAYA,CAAA;IACV,IAAI,IAAI,CAACV,cAAc,KAAKC,SAAS,EAAE;MACrC;MACA,IAAI,IAAI,CAACX,aAAa,GAAG,IAAI,CAACD,SAAS,CAACS,MAAM,GAAG,CAAC,EAAE;QAClD,IAAI,CAACR,aAAa,EAAE;QACpB,IAAI,CAACO,YAAY,EAAE;OACpB,MAAM;QACLc,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpDD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACrB,SAAS,CAAC;QAC/C;;;EAGN;CACD;;AAnDYL,sBAAsB,GAAA2B,UAAA,EALlC5B,SAAS,CAAC;EACT6B,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,C,EACW9B,sBAAsB,CAmDlC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}