{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction TelaPerguntasComponent_div_1_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 4);\n    i0.ɵɵlistener(\"click\", function TelaPerguntasComponent_div_1_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const alternativa_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.selectAnswer(alternativa_r2.id));\n    });\n    i0.ɵɵelementStart(1, \"div\", 5);\n    i0.ɵɵelement(2, \"input\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const alternativa_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"selected\", alternativa_r2.id === ctx_r1.selectedAnswer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"value\", alternativa_r2.id)(\"checked\", alternativa_r2.id === ctx_r1.selectedAnswer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", alternativa_r2.resposta, \" \");\n  }\n}\nfunction TelaPerguntasComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ul\");\n    i0.ɵɵtemplate(4, TelaPerguntasComponent_div_1_li_4_Template, 4, 5, \"li\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function TelaPerguntasComponent_div_1_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.confirmAnswer());\n    });\n    i0.ɵɵtext(6, \"Confirmar\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.question.conteudo);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.question.alternativas);\n  }\n}\nexport class TelaPerguntasComponent {\n  constructor(http) {\n    this.http = http;\n    this.perguntas = [];\n    this.questionIndex = 0;\n  }\n  ngOnInit() {\n    this.loadQuestions();\n  }\n  loadQuestions() {\n    this.http.get('assets/perguntas.json').subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex];\n      this.selectedAnswer = undefined;\n      this.respostaCorreta = undefined; // Limpar o estado da resposta correta ao carregar uma nova pergunta\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n  selectAnswer(alternativaId) {\n    this.selectedAnswer = alternativaId;\n  }\n  confirmAnswer() {\n    if (this.selectedAnswer !== undefined) {\n      const alternativaSelecionada = this.question?.alternativas.find(a => a.id === this.selectedAnswer);\n      if (alternativaSelecionada) {\n        this.respostaCorreta = alternativaSelecionada.id === this.question?.respostaCorretaId;\n        this.nextQuestion(); // Avançar para a próxima pergunta após verificar a resposta\n      }\n    }\n  }\n\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n  static #_ = this.ɵfac = function TelaPerguntasComponent_Factory(t) {\n    return new (t || TelaPerguntasComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TelaPerguntasComponent,\n    selectors: [[\"app-tela-perguntas\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"container\"], [\"class\", \"question-container\", 4, \"ngIf\"], [1, \"question-container\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"alternativa-box\"], [\"type\", \"radio\", \"name\", \"alternativa\", 3, \"value\", \"checked\"]],\n    template: function TelaPerguntasComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, TelaPerguntasComponent_div_1_Template, 7, 2, \"div\", 1);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.question);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    height: 100vh;\\n  }\\n  \\n  .question-container[_ngcontent-%COMP%] {\\n    max-width: 600px;\\n    padding: 20px;\\n    border: 2px solid #ccc;\\n    border-radius: 10px;\\n  }\\n  \\n  .question-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\\n    margin-bottom: 20px;\\n  }\\n  \\n  ul[_ngcontent-%COMP%] {\\n    list-style-type: none;\\n    padding: 0;\\n  }\\n  \\n  li[_ngcontent-%COMP%] {\\n    margin-bottom: 10px;\\n  }\\n  \\n  input[type=\\\"radio\\\"][_ngcontent-%COMP%] {\\n    display: none;\\n  }\\n  \\n  .alternativa-box[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 15px; \\n\\n    border: 2px solid #ccc;\\n    border-radius: 5px;\\n    cursor: pointer;\\n    transition: background-color 0.3s; \\n\\n  }\\n  \\n  .alternativa-box[_ngcontent-%COMP%]:hover {\\n    background-color: #f0f0f0;\\n  }\\n  \\n  .selected[_ngcontent-%COMP%] {\\n    background-color: #e0e0e0;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdGVsYS1wZXJndW50YXMvdGVsYS1wZXJndW50YXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLGFBQWE7SUFDYix1QkFBdUI7SUFDdkIsbUJBQW1CO0lBQ25CLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixhQUFhO0lBQ2Isc0JBQXNCO0lBQ3RCLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHFCQUFxQjtJQUNyQixVQUFVO0VBQ1o7O0VBRUE7SUFDRSxtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsYUFBYSxFQUFFLDhCQUE4QjtJQUM3QyxzQkFBc0I7SUFDdEIsa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixpQ0FBaUMsRUFBRSx3Q0FBd0M7RUFDN0U7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0I7O0VBRUE7SUFDRSx5QkFBeUI7RUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBoZWlnaHQ6IDEwMHZoO1xyXG4gIH1cclxuICBcclxuICAucXVlc3Rpb24tY29udGFpbmVyIHtcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICBwYWRkaW5nOiAyMHB4O1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgI2NjYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5xdWVzdGlvbi1jb250YWluZXIgaDIge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgdWwge1xyXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICAgcGFkZGluZzogMDtcclxuICB9XHJcbiAgXHJcbiAgbGkge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG4gIFxyXG4gIC5hbHRlcm5hdGl2YS1ib3gge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBwYWRkaW5nOiAxNXB4OyAvKiBBdW1lbnRhciBvIGVzcGHDg8KnbyBpbnRlcm5vICovXHJcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjNzOyAvKiBBZGljaW9uYXIgdHJhbnNpw4PCp8ODwqNvIGRlIGNvciBkZSBmdW5kbyAqL1xyXG4gIH1cclxuICBcclxuICAuYWx0ZXJuYXRpdmEtYm94OmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMGYwZjA7XHJcbiAgfVxyXG4gIFxyXG4gIC5zZWxlY3RlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZTBlMGUwO1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵlistener","TelaPerguntasComponent_div_1_li_4_Template_li_click_0_listener","restoredCtx","ɵɵrestoreView","_r4","alternativa_r2","$implicit","ctx_r3","ɵɵnextContext","ɵɵresetView","selectAnswer","id","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵclassProp","ctx_r1","selectedAnswer","ɵɵproperty","ɵɵtextInterpolate1","resposta","ɵɵtemplate","TelaPerguntasComponent_div_1_li_4_Template","TelaPerguntasComponent_div_1_Template_button_click_5_listener","_r6","ctx_r5","confirmAnswer","ɵɵtextInterpolate","ctx_r0","question","conteudo","alternativas","TelaPerguntasComponent","constructor","http","perguntas","questionIndex","ngOnInit","loadQuestions","get","subscribe","data","loadQuestion","length","undefined","respostaCorreta","alternativaId","alternativaSelecionada","find","a","respostaCorretaId","nextQuestion","console","log","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","TelaPerguntasComponent_Template","rf","ctx","TelaPerguntasComponent_div_1_Template"],"sources":["C:\\Users\\pedro\\TelaPerguntas\\src\\app\\tela-perguntas\\tela-perguntas.component.ts","C:\\Users\\pedro\\TelaPerguntas\\src\\app\\tela-perguntas\\tela-perguntas.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\ninterface Pergunta {\n  id: number;\n  tipo: 'texto' | 'imagem';\n  conteudo: string;\n  alternativas: Alternativa[];\n  respostaCorretaId: number; // Adicionando a propriedade respostaCorretaId\n}\n\ninterface Alternativa {\n  id: number;\n  resposta: string;\n  tipo: 'texto' | 'imagem';\n}\n\n@Component({\n  selector: 'app-tela-perguntas',\n  templateUrl: './tela-perguntas.component.html',\n  styleUrls: ['./tela-perguntas.component.css']\n})\nexport class TelaPerguntasComponent implements OnInit {\n  perguntas: Pergunta[] = [];\n  question: Pergunta | undefined;\n  questionIndex: number = 0;\n  selectedAnswer: number | undefined;\n  respostaCorreta: boolean | undefined; // Variável para armazenar se a resposta está correta\n\n  constructor(private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.loadQuestions();\n  }\n\n  loadQuestions() {\n    this.http.get<Pergunta[]>('assets/perguntas.json').subscribe(data => {\n      this.perguntas = data;\n      this.loadQuestion();\n    });\n  }\n\n  loadQuestion() {\n    if (this.perguntas.length > 0 && this.questionIndex < this.perguntas.length) {\n      this.question = this.perguntas[this.questionIndex]; \n      this.selectedAnswer = undefined;\n      this.respostaCorreta = undefined; // Limpar o estado da resposta correta ao carregar uma nova pergunta\n    } else {\n      // Resetar o índice quando todas as perguntas forem respondidas\n      this.questionIndex = 0;\n    }\n  }\n\n  selectAnswer(alternativaId: number) {\n    this.selectedAnswer = alternativaId;\n  }\n\n  confirmAnswer() {\n    if (this.selectedAnswer !== undefined) {\n      const alternativaSelecionada = this.question?.alternativas.find(a => a.id === this.selectedAnswer);\n      if (alternativaSelecionada) {\n        this.respostaCorreta = alternativaSelecionada.id === this.question?.respostaCorretaId;\n        this.nextQuestion(); // Avançar para a próxima pergunta após verificar a resposta\n      }\n    }\n  }\n  \n\n  nextQuestion() {\n    if (this.selectedAnswer !== undefined) {\n      // Verificar se ainda há perguntas para exibir\n      if (this.questionIndex < this.perguntas.length - 1) {\n        this.questionIndex++;\n        this.loadQuestion();\n      } else {\n        console.log(\"Todas as perguntas foram respondidas.\");\n        // Aqui você pode adicionar a lógica para o que acontece quando todas as perguntas forem respondidas\n      }\n    }\n  }\n}\n","<div class=\"container\">\n    <div class=\"question-container\" *ngIf=\"question\">\n      <h2>{{ question.conteudo }}</h2>\n      <ul>\n        <li *ngFor=\"let alternativa of question.alternativas\" (click)=\"selectAnswer(alternativa.id)\">\n          <div class=\"alternativa-box\" [class.selected]=\"alternativa.id === selectedAnswer\">\n            <input type=\"radio\" name=\"alternativa\" [value]=\"alternativa.id\" [checked]=\"alternativa.id === selectedAnswer\">\n            {{ alternativa.resposta }}\n          </div>\n        </li>\n      </ul>\n      <button (click)=\"confirmAnswer()\">Confirmar</button>\n    </div>\n  </div>\n  "],"mappings":";;;;;;ICIQA,EAAA,CAAAC,cAAA,YAA6F;IAAvCD,EAAA,CAAAE,UAAA,mBAAAC,+DAAA;MAAA,MAAAC,WAAA,GAAAJ,EAAA,CAAAK,aAAA,CAAAC,GAAA;MAAA,MAAAC,cAAA,GAAAH,WAAA,CAAAI,SAAA;MAAA,MAAAC,MAAA,GAAAT,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAF,MAAA,CAAAG,YAAA,CAAAL,cAAA,CAAAM,EAAA,CAA4B;IAAA,EAAC;IAC1Fb,EAAA,CAAAC,cAAA,aAAkF;IAChFD,EAAA,CAAAc,SAAA,eAA8G;IAC9Gd,EAAA,CAAAe,MAAA,GACF;IAAAf,EAAA,CAAAgB,YAAA,EAAM;;;;;IAHuBhB,EAAA,CAAAiB,SAAA,GAAoD;IAApDjB,EAAA,CAAAkB,WAAA,aAAAX,cAAA,CAAAM,EAAA,KAAAM,MAAA,CAAAC,cAAA,CAAoD;IACxCpB,EAAA,CAAAiB,SAAA,GAAwB;IAAxBjB,EAAA,CAAAqB,UAAA,UAAAd,cAAA,CAAAM,EAAA,CAAwB,YAAAN,cAAA,CAAAM,EAAA,KAAAM,MAAA,CAAAC,cAAA;IAC/DpB,EAAA,CAAAiB,SAAA,GACF;IADEjB,EAAA,CAAAsB,kBAAA,MAAAf,cAAA,CAAAgB,QAAA,MACF;;;;;;IAPNvB,EAAA,CAAAC,cAAA,aAAiD;IAC3CD,EAAA,CAAAe,MAAA,GAAuB;IAAAf,EAAA,CAAAgB,YAAA,EAAK;IAChChB,EAAA,CAAAC,cAAA,SAAI;IACFD,EAAA,CAAAwB,UAAA,IAAAC,0CAAA,gBAKK;IACPzB,EAAA,CAAAgB,YAAA,EAAK;IACLhB,EAAA,CAAAC,cAAA,gBAAkC;IAA1BD,EAAA,CAAAE,UAAA,mBAAAwB,8DAAA;MAAA1B,EAAA,CAAAK,aAAA,CAAAsB,GAAA;MAAA,MAAAC,MAAA,GAAA5B,EAAA,CAAAU,aAAA;MAAA,OAASV,EAAA,CAAAW,WAAA,CAAAiB,MAAA,CAAAC,aAAA,EAAe;IAAA,EAAC;IAAC7B,EAAA,CAAAe,MAAA,gBAAS;IAAAf,EAAA,CAAAgB,YAAA,EAAS;;;;IAThDhB,EAAA,CAAAiB,SAAA,GAAuB;IAAvBjB,EAAA,CAAA8B,iBAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAC,QAAA,CAAuB;IAEGjC,EAAA,CAAAiB,SAAA,GAAwB;IAAxBjB,EAAA,CAAAqB,UAAA,YAAAU,MAAA,CAAAC,QAAA,CAAAE,YAAA,CAAwB;;;ADkB5D,OAAM,MAAOC,sBAAsB;EAOjCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANxB,KAAAC,SAAS,GAAe,EAAE;IAE1B,KAAAC,aAAa,GAAW,CAAC;EAIe;EAExCC,QAAQA,CAAA;IACN,IAAI,CAACC,aAAa,EAAE;EACtB;EAEAA,aAAaA,CAAA;IACX,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAa,uBAAuB,CAAC,CAACC,SAAS,CAACC,IAAI,IAAG;MAClE,IAAI,CAACN,SAAS,GAAGM,IAAI;MACrB,IAAI,CAACC,YAAY,EAAE;IACrB,CAAC,CAAC;EACJ;EAEAA,YAAYA,CAAA;IACV,IAAI,IAAI,CAACP,SAAS,CAACQ,MAAM,GAAG,CAAC,IAAI,IAAI,CAACP,aAAa,GAAG,IAAI,CAACD,SAAS,CAACQ,MAAM,EAAE;MAC3E,IAAI,CAACd,QAAQ,GAAG,IAAI,CAACM,SAAS,CAAC,IAAI,CAACC,aAAa,CAAC;MAClD,IAAI,CAACnB,cAAc,GAAG2B,SAAS;MAC/B,IAAI,CAACC,eAAe,GAAGD,SAAS,CAAC,CAAC;KACnC,MAAM;MACL;MACA,IAAI,CAACR,aAAa,GAAG,CAAC;;EAE1B;EAEA3B,YAAYA,CAACqC,aAAqB;IAChC,IAAI,CAAC7B,cAAc,GAAG6B,aAAa;EACrC;EAEApB,aAAaA,CAAA;IACX,IAAI,IAAI,CAACT,cAAc,KAAK2B,SAAS,EAAE;MACrC,MAAMG,sBAAsB,GAAG,IAAI,CAAClB,QAAQ,EAAEE,YAAY,CAACiB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAK,IAAI,CAACO,cAAc,CAAC;MAClG,IAAI8B,sBAAsB,EAAE;QAC1B,IAAI,CAACF,eAAe,GAAGE,sBAAsB,CAACrC,EAAE,KAAK,IAAI,CAACmB,QAAQ,EAAEqB,iBAAiB;QACrF,IAAI,CAACC,YAAY,EAAE,CAAC,CAAC;;;EAG3B;;EAGAA,YAAYA,CAAA;IACV,IAAI,IAAI,CAAClC,cAAc,KAAK2B,SAAS,EAAE;MACrC;MACA,IAAI,IAAI,CAACR,aAAa,GAAG,IAAI,CAACD,SAAS,CAACQ,MAAM,GAAG,CAAC,EAAE;QAClD,IAAI,CAACP,aAAa,EAAE;QACpB,IAAI,CAACM,YAAY,EAAE;OACpB,MAAM;QACLU,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;QACpD;;;EAGN;EAAC,QAAAC,CAAA,G;qBAzDUtB,sBAAsB,EAAAnC,EAAA,CAAA0D,iBAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAtB1B,sBAAsB;IAAA2B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,gCAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCtBnCpE,EAAA,CAAAC,cAAA,aAAuB;QACnBD,EAAA,CAAAwB,UAAA,IAAA8C,qCAAA,iBAWM;QACRtE,EAAA,CAAAgB,YAAA,EAAM;;;QAZ6BhB,EAAA,CAAAiB,SAAA,GAAc;QAAdjB,EAAA,CAAAqB,UAAA,SAAAgD,GAAA,CAAArC,QAAA,CAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}